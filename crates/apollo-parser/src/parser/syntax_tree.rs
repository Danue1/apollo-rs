use std::fmt;

use crate::TokenKind;

use super::GraphQLLanguage;

/// An AST generated by the parser.
pub struct SyntaxTree {
    pub(crate) ast: rowan::SyntaxNode<GraphQLLanguage>,
    pub(crate) errors: Vec<crate::Error>,
}

impl SyntaxTree {
    /// Get a reference to the syntax tree's errors.
    pub fn errors(&self) -> &Vec<crate::Error> {
        &self.errors
    }
}

impl fmt::Debug for SyntaxTree {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        type SyntaxNode = rowan::SyntaxNode<GraphQLLanguage>;
        #[allow(unused)]
        type SyntaxToken = rowan::SyntaxToken<GraphQLLanguage>;
        #[allow(unused)]
        type SyntaxElement = rowan::NodeOrToken<SyntaxNode, SyntaxToken>;

        fn print(f: &mut fmt::Formatter<'_>, indent: usize, element: SyntaxElement) -> fmt::Result {
            let kind: TokenKind = element.kind().into();
            print!("{:indent$}", "", indent = indent);
            match element {
                rowan::NodeOrToken::Node(node) => {
                    writeln!(f, "- {:?}@{:?}", kind, node.text_range())?;
                    for child in node.children_with_tokens() {
                        print(f, indent + 2, child)?;
                    }
                    Ok(())
                }

                rowan::NodeOrToken::Token(token) => {
                    writeln!(
                        f,
                        "- {:?}@{:?} {:?}",
                        kind,
                        token.text_range(),
                        token.text()
                    )
                }
            }
        }

        print(f, 0, self.ast.clone().into())
    }
}
